{"ast":null,"code":"import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from 'redux-thunk';\nimport BookReducer from \"../Reducer/BookReducer\"; // This import come from npm redux dev tool extension helper \n\nimport { composeWithDevTools } from 'redux-devtools-extension'; // costume middleware \n// function exampleMiddleware(storeAPI) {\n//     return function wrapDispatch(next) {\n//       return function handleAction(action) {\n//         // console.log('action dispatch', action);\n//         return next(action)\n//       }\n//     }\n//   }\n// When i have lots of reducer components then combine \n\nconst rootReducer = combineReducers({\n  books: BookReducer\n}); // middleware library example redux SAGA redux THUNK\n// in \n// middleware for get data from api\n\nconst middleware = applyMiddleware(thunk);\nexport const store = createStore(rootReducer, composeWithDevTools(middleware));","map":{"version":3,"sources":["/home/umar/Desktop/Web development/redux-book-shelf/src/Redux/Store/Store.js"],"names":["applyMiddleware","combineReducers","createStore","thunk","BookReducer","composeWithDevTools","rootReducer","books","middleware","store"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CACA;;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,WAAW,GAAGL,eAAe,CAAC;AAChCM,EAAAA,KAAK,EAAGH;AADwB,CAAD,CAAnC,C,CAIA;AACA;AACA;;AACA,MAAMI,UAAU,GAAGR,eAAe,CAACG,KAAD,CAAlC;AAEA,OAAO,MAAMM,KAAK,GAAGP,WAAW,CAACI,WAAD,EAAaD,mBAAmB,CAACG,UAAD,CAAhC,CAAzB","sourcesContent":["import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from 'redux-thunk';\nimport BookReducer from \"../Reducer/BookReducer\";\n// This import come from npm redux dev tool extension helper \nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// costume middleware \n// function exampleMiddleware(storeAPI) {\n//     return function wrapDispatch(next) {\n//       return function handleAction(action) {\n//         // console.log('action dispatch', action);\n//         return next(action)\n//       }\n//     }\n//   }\n\n// When i have lots of reducer components then combine \nconst rootReducer = combineReducers({\n    books : BookReducer\n})\n\n// middleware library example redux SAGA redux THUNK\n// in \n// middleware for get data from api\nconst middleware = applyMiddleware(thunk)\n\nexport const store = createStore(rootReducer,composeWithDevTools(middleware))"]},"metadata":{},"sourceType":"module"}